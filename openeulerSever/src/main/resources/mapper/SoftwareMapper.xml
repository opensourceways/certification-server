<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.huawei.it.euler.mapper.SoftwareMapper">

    <resultMap id="BaseResultMap" type="com.huawei.it.euler.model.entity.Software">
        <id column="id" property="id"/>
        <result column="company_id" property="companyId"/>
        <result column="company_name" property="companyName"/>
        <result column="product_name" property="productName"/>
        <result column="product_function_desc" property="productFunctionDesc"/>
        <result column="usage_scenes_desc" property="usageScenesDesc"/>
        <result column="product_version" property="productVersion"/>
        <result column="os_name" property="osName"/>
        <result column="os_version" property="osVersion"/>
        <result column="init_os_name" property="initOsName"/>
        <result column="init_os_version" property="initOsVersion"/>
        <result column="hashrate_platform" property="jsonHashRatePlatform"/>
        <result column="product_type" property="productType"/>
        <result column="test_organization" property="testOrganization"/>
        <result column="test_org_id" property="testOrgId"/>
        <result column="status" property="status"/>
        <result column="update_time" property="updateTime"/>
        <result column="application_time" property="applicationTime"/>
        <result column="user_uuid" property="userUuid"/>
        <result column="cpu_vendor" property="cpuVendor"/>
        <result column="as_id" property="asId"/>
        <result column="review_role" property="reviewRole"/>
        <result column="company_code" property="companyCode"/>
    </resultMap>

    <resultMap id="softwareMap" type="com.huawei.it.euler.model.vo.SoftwareVo">
        <id column="id" property="id"/>
        <result column="company_name" property="companyName"/>
        <result column="product_name" property="productName"/>
        <result column="product_type" property="productType"/>
        <result column="product_version" property="productVersion"/>
        <result column="os_name" property="osName"/>
        <result column="os_version" property="osVersion"/>
        <result column="init_os_name" property="initOsName"/>
        <result column="init_os_version" property="initOsVersion"/>
        <result column="hashrate_platform" property="jsonHashRatePlatform"/>
        <result column="test_organization" property="testOrganization"/>
        <result column="test_org_id" property="testOrgId"/>
        <result column="application_time" property="applicationTime"/>
        <result column="status" property="status"/>
        <result column="reviewer" property="reviewer"/>
        <result column="review_role" property="reviewRole"/>
        <result column="authentication_status" property="authenticationStatus"/>
        <result column="cpu_vendor" property="cpuVendor"/>
        <result column="user_uuid" property="userUuid"/>
        <result column="as_id" property="asId"/>
        <result column="product_function_desc" property="productFunctionDesc"/>
        <result column="usage_scenes_desc" property="usageScenesDesc"/>
        <result column="validity_period" property="validityPeriod"/>
    </resultMap>

    <resultMap id="compatibilityMap" type="com.huawei.it.euler.model.entity.Compatibility">
        <id column="id" property="certId"/>
        <result column="company_name" property="companyName"/>
        <result column="product_name" property="productName"/>
        <result column="product_type" property="type"/>
        <result column="product_version" property="productVersion"/>
        <result column="os_name" property="osName"/>
        <result column="os_version" property="osVersion"/>
        <result column="hashrate_platform" property="jsonPlatformTypeAndServerModel"/>
        <result column="test_organization" property="testOrganization"/>
    </resultMap>

    <resultMap id="AttachmentsMap" type="com.huawei.it.euler.model.entity.Attachments">
        <result column="filename" property="fileName"/>
        <result column="file_path" property="filePath"/>
        <result column="software_id" property="softwareId"/>
        <result column="file_type" property="fileType"/>
        <result column="fileid" property="fileId"/>
    </resultMap>

    <resultMap id="AttachmentsVoMap" type="com.huawei.it.euler.model.vo.AttachmentsVo">
        <result column="filename" property="fileName"/>
        <result column="fileid" property="fileId"/>
    </resultMap>

    <resultMap id="AuditRecordsVoMap" type="com.huawei.it.euler.model.vo.AuditRecordsVo">
        <result column="node_name" property="nodeName"/>
        <result column="handler" property="handler"/>
        <result column="handler_result" property="handlerResultId"/>
        <result column="handler_time" property="handlerTime"/>
        <result column="transferred_comments" property="transferredComments"/>
    </resultMap>

    <resultMap id="SoftwareStatisticsMap" type="com.huawei.it.euler.ddd.domain.software.SoftwareStatistics">
        <result column="sum" property="count"/>
        <result column="datePeriod" property="datePeriod"/>
        <result column="test_organization" property="testOrganization"/>
        <result column="productType" property="productType"/>
    </resultMap>

    <sql id="baseFields">
        id, company_id, company_name, product_name, product_function_desc, usage_scenes_desc, product_version, os_name, os_version,
        init_os_name, init_os_version, hashrate_platform, server_type, product_type, test_organization,test_org_id, status, update_time, application_time,
        reviewer,review_role, user_uuid, cpu_vendor, as_id,company_code,certification_time
    </sql>

    <sql id="insertFields">
        company_id, company_name, product_name, product_function_desc, usage_scenes_desc, product_version, os_name, os_version,
        init_os_name, init_os_version, hashrate_platform, product_type, test_organization,test_org_id, status, update_time, application_time,
        reviewer,review_role, user_uuid, cpu_vendor, as_id,company_code,delete_flag
    </sql>

    <sql id="insertAttachFields">
        filename, fileid, software_id, update_time, file_path, file_type, uuid
    </sql>

    <sql id="whereSoftwareList">
        <where>
            s.delete_flag = 0
            <if test="software.statusId != null and software.statusId.size() > 0">
                and s.status in
                <foreach collection="software.statusId" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.testOrganization != null and software.testOrganization.size() > 0">
                and test_organization in
                <foreach collection="software.testOrganization" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.testOrgId != null and software.testOrgId.size() > 0">
                and test_org_id in
                <foreach collection="software.testOrgId" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.productType != null and software.productType.size() > 0">
                and
                <foreach collection="software.productType" item="item" open="(" separator="or" close=")">
                    instr(product_type, #{item})
                </foreach>
            </if>
            <if test="software.companyName != null and software.companyName != ''">
                and company_name = #{software.companyName}
            </if>
            <if test="software.productName != null and software.productName != ''">
                and lower(product_name) like lower(concat('%/',#{software.productName},'%')) escape '/'
            </if>
            <if test="software.applicant != null and software.applicant != ''">
                and s.id not in (select software_id from software_display_t where uuid = #{software.applicant})
            </if>
            <if test="software.beginCertificationTime != null">
                and DATE_FORMAT(s.certification_time,'%Y-%m-%d') &gt;= DATE_FORMAT(#{software.beginCertificationTime},'%Y-%m-%d')
            </if>
            <if test="software.endCertificationTime != null">
                and DATE_FORMAT(s.certification_time,'%Y-%m-%d') &lt;= DATE_FORMAT(#{software.endCertificationTime},'%Y-%m-%d')
            </if>
            <if test="software.beginApplicationTime != null">
                and DATE_FORMAT(s.application_time,'%Y-%m-%d') &gt;= DATE_FORMAT(#{software.beginApplicationTime},'%Y-%m-%d')
            </if>
            <if test="software.endApplicationTime != null">
                and DATE_FORMAT(s.application_time,'%Y-%m-%d') &lt;= DATE_FORMAT(#{software.endApplicationTime},'%Y-%m-%d')
            </if>
        </where>
    </sql>
    <sql id="whereReviewSoftwareList">
        <where>
            s.delete_flag = 0
            <if test="software.status != null and software.status.size() > 0">
                and s.status in (select id from node_name_t where node_name in
                <foreach collection="software.status" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.statusId != null and software.statusId.size() > 0">
                and s.status in
                <foreach collection="software.statusId" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.testOrganization != null and software.testOrganization.size() > 0">
                and test_organization in
                <foreach collection="software.testOrganization" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.testOrgId != null and software.testOrgId.size() > 0">
                and test_org_id in
                <foreach collection="software.testOrgId" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.dataScope != null and software.dataScope != 'ALL'">
                and test_org_id IN
                <foreach item="item" index="index" collection="software.dataScope.split(',')" open="(" separator=","
                         close=")">
                    #{item}
                </foreach>
            </if>
            <if test="software.productType != null and software.productType.size() > 0">
                and
                <foreach collection="software.productType" item="item" open="(" separator="or" close=")">
                    instr(product_type, #{item})
                </foreach>
            </if>
            <if test="software.productName != null and software.productName != ''">
                and concat(lower(product_name), lower(company_name)) like
                lower(concat('%/',#{software.productName},'%')) escape
                '/'
            </if>
            <if test="software.uuid != null and software.uuid != ''">
                and s.id not in (select software_id from software_display_t where uuid = #{software.uuid})
            </if>
            <if test="software.beginCertificationTime != null">
                and DATE_FORMAT(s.certification_time,'%Y-%m-%d') &gt;= DATE_FORMAT(#{software.beginCertificationTime},'%Y-%m-%d')
            </if>
            <if test="software.endCertificationTime != null">
                and DATE_FORMAT(s.certification_time,'%Y-%m-%d') &lt;= DATE_FORMAT(#{software.endCertificationTime},'%Y-%m-%d')
            </if>
            <if test="software.beginApplicationTime != null">
                and DATE_FORMAT(s.application_time,'%Y-%m-%d') &gt;= DATE_FORMAT(#{software.beginApplicationTime},'%Y-%m-%d')
            </if>
            <if test="software.endApplicationTime != null">
                and DATE_FORMAT(s.application_time,'%Y-%m-%d') &lt;= DATE_FORMAT(#{software.endApplicationTime},'%Y-%m-%d')
            </if>
        </where>
    </sql>

    <select id="findById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="baseFields"/>
        from software_t where id = #{id} and delete_flag = 0
    </select>

    <select id="findCommunityCheckList" resultMap="compatibilityMap">
        select
        <include refid="baseFields"/>
        from software_t where status = 9
        <if test="testOrganization != null and testOrganization != ''">
            and (test_organization = #{testOrganization} or test_organization_cp = #{testOrganization})
        </if>
        <if test="osName != null and osName != ''">
            and os_name = #{osName}
        </if>
        <if test="keyword != null and keyword != ''">
            and (lower(company_name) like lower(concat('%/',#{keyword},'%')) escape '/' || lower(product_name) like
            lower(concat('%/',#{keyword},'%')) escape '/')
        </if>
    </select>

    <update id="updateSoftwareById" parameterType="com.huawei.it.euler.model.entity.Software">
        update software_t
        set product_name      = #{productName},
            product_version   = #{productVersion},
            os_name           = #{osName},
            os_version        = #{osVersion},
            hashrate_platform = #{jsonHashRatePlatform},
            update_time       = NOW()
        where id = #{id}
    </update>

    <update id="updateCertificationInfoById" parameterType="com.huawei.it.euler.model.vo.CertificateInfoVo">
        update software_t
        set certificate_type      = #{certificateType},
            certificate_interests = #{certificateInterests},
            validity_period       = #{validityPeriod}
        where id = #{softwareId}
    </update>

    <insert id="insertSoftware" parameterType="com.huawei.it.euler.model.entity.Software"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into software_t(<include refid="insertFields"/>) values (#{companyId}, #{companyName}, #{productName},
        #{productFunctionDesc}, #{usageScenesDesc}, #{productVersion}, #{osName}, #{osVersion}, #{initOsName}, #{initOsVersion},
        #{jsonHashRatePlatform}, #{productType}, #{testOrganization},#{testOrgId}, #{status}, #{updateTime}, #{applicationTime},
        #{reviewer},#{reviewRole}, #{userUuid}, #{cpuVendor}, #{asId},#{companyCode},0)
    </insert>

    <update id="updateSoftware" parameterType="com.huawei.it.euler.model.entity.Software">
        update software_t
        set status                = #{status},
            reviewer              = #{reviewer},
            update_time           = #{updateTime},
            authentication_status = #{authenticationStatus},
            review_role           = #{reviewRole},
            update_time           = now()
            <if test="certificationTime != null">
                , certification_time = #{certificationTime}
            </if>
        where id = #{id}
    </update>

    <select id="countSoftwareList" resultType="java.lang.Long">
        select COUNT(*) from software_t AS s
        <include refid="whereSoftwareList"/>
    </select>

    <select id="getSoftwareList" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery"
            resultMap="softwareMap">
        select s.id, s.company_name, s.product_name, s.product_type, s.product_version, s.os_name, s.os_version,
        s.init_os_name, s.init_os_version, s.hashrate_platform, s.test_organization, s.application_time, s.reviewer,
        s.authentication_status, s.cpu_vendor, s.status,  s.user_uuid,s.test_org_id,s.certification_time
        from software_t AS s
        <include refid="whereSoftwareList"/>
        order by
        <choose>
            <when test="software.sort != null and software.sort != ''">
                ${software.sort},s.update_time DESC
            </when>
            <otherwise>
                IF(reviewer = #{software.applicant}, 0, 1),
                IF(user_uuid = #{software.applicant}, 0, 1),s.update_time DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="getSoftwareListOfProductType" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery" resultType="java.lang.String">
        select distinct s.product_type
        from software_t AS s
        <include refid="whereSoftwareList"/>
    </select>

    <select id="getSoftwareListOfTestOrganization" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery" resultType="java.lang.String">
        select distinct s.test_org_id
        from software_t AS s
        <include refid="whereSoftwareList"/>
    </select>

    <select id="getSoftwareListOfStatus" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery" resultType="java.lang.String">
        select distinct s.status
        from software_t AS s
        <include refid="whereSoftwareList"/>
    </select>

    <select id="countReviewSoftwareList" resultType="java.lang.Long">
        select COUNT(*) from software_t AS s
        <include refid="whereReviewSoftwareList"/>
    </select>

    <select id="getReviewSoftwareList"
            resultMap="softwareMap">
        select s.id, s.company_name, s.product_name, s.product_type, s.product_version, s.os_name, s.os_version,
        s.reviewer,s.review_role,
        s.hashrate_platform, s.test_organization,s.test_org_id,
        s.application_time,s.status,s.authentication_status,s.cpu_vendor,s.certification_time, s.user_uuid
        from software_t AS s
        <include refid="whereReviewSoftwareList"/>
        order by
        <choose>
            <when test="software.sort != null and software.sort != ''">
                ${software.sort},s.update_time DESC
            </when>
            <otherwise>
                IF(reviewer = #{software.uuid}, 0, 1),s.update_time DESC
            </otherwise>
        </choose>
        LIMIT #{offset}, #{pageSize}
    </select>

    <select id="getReviewSoftwareListOfProductType" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery" resultType="java.lang.String">
        select distinct s.product_type
        from software_t AS s
        <include refid="whereReviewSoftwareList"/>
    </select>

    <select id="getReviewSoftwareListOfTestOrganization" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery" resultType="java.lang.String">
        select distinct s.test_org_id
        from software_t AS s
        <include refid="whereReviewSoftwareList"/>
    </select>

    <select id="getReviewSoftwareListOfStatus" parameterType="com.huawei.it.euler.model.entity.SoftwareQuery" resultType="java.lang.String">
        select distinct s.status
        from software_t AS s
        <include refid="whereReviewSoftwareList"/>
    </select>

    <select id="getExportSoftwareList" resultMap="softwareMap">
        select s.id, s.company_name, s.product_name, s.product_type, s.product_version, s.os_name, s.os_version,
        s.reviewer,s.review_role,s.hashrate_platform, s.test_organization,s.test_org_id,
        s.application_time,s.status,s.authentication_status,s.cpu_vendor,s.certification_time, s.user_uuid,s.product_function_desc,s.usage_scenes_desc,s.validity_period
        from software_t AS s
        <include refid="whereReviewSoftwareList"/>
    </select>

    <select id="getAuditRecordsList" parameterType="java.lang.Integer"
            resultType="com.huawei.it.euler.model.vo.AuditRecordsVo">
        select node_name,
               handler,
               handler_time,
               transferred_comments,
               status,
               case handler_result
                   when '0' then '待处理'
                   when '1' then '通过'
                   when '2' then '已驳回'
                   when '3' then '转审'
                   when '4' then '撤回'
                   end as handler_result
        from node_t
        where software_id = #{softwareId}
        order by status DESC
    </select>

    <select id="getAuditRecordsListPage" resultMap="AuditRecordsVoMap">
        select node_name,handler, handler_time, transferred_comments, status, handler_result
        from node_t AS n
        where software_id = #{softwareId}
        <if test="nodeName != null and nodeName != ''">
            and node_name = #{nodeName}
        </if>
        order by case when handler_time is null then 1 else 0 end DESC, handler_time DESC
    </select>

    <select id="certificateInfo" parameterType="java.lang.Integer"
            resultType="com.huawei.it.euler.model.vo.CertificateInfoVo">
        select certificate_type, certificate_interests, validity_period
        from software_t
        where id = #{softwareId}
    </select>

    <insert id="insertAttachment" parameterType="com.huawei.it.euler.model.entity.FileModel"
            useGeneratedKeys="true" keyProperty="id">
        insert into attachments_t (<include refid="insertAttachFields"/>)
        values (#{fileName}, #{fileId}, #{softwareId}, #{updateTime}, #{filePath}, #{fileType}, #{uuid})
    </insert>

    <update id="updateSign" parameterType="com.huawei.it.euler.model.entity.FileModel"
            useGeneratedKeys="true" keyProperty="id">
        update attachments_t
        set fileid      = #{fileId},
            filename    = #{fileName},
            update_time = #{updateTime},
            file_path   = #{filePath}
        where software_id = #{softwareId}
          and file_type = 'sign'
    </update>

    <select id="getAttachmentsNames" parameterType="com.huawei.it.euler.model.query.AttachmentQuery"
            resultMap="AttachmentsVoMap">
        select filename, fileid
        from attachments_t
        where software_id = #{softwareId}
          and file_type = #{fileType}
    </select>

    <select id="downloadAttachments" parameterType="java.lang.String" resultMap="AttachmentsMap">
        select file_path, filename, software_id, uuid, file_type
        from attachments_t
        where fileid = #{fileId}
    </select>

    <delete id="deleteAttachments" parameterType="java.lang.String">
        delete
        from attachments_t
        where fileid = #{fileId}
    </delete>
    <update id="recommit" parameterType="com.huawei.it.euler.model.entity.Software">
        update software_t
        set product_name          = #{productName},
            product_version       = #{productVersion},
            os_name               = #{osName},
            os_version            = #{osVersion},
            init_os_name          = #{initOsName},
            init_os_version       = #{initOsVersion},
            product_function_desc = #{productFunctionDesc},
            usage_scenes_desc     = #{usageScenesDesc},
            hashrate_platform     = #{jsonHashRatePlatform},
            update_time           = #{updateTime},
            product_type          = #{productType},
            test_org_id           = #{testOrgId},
            test_organization     = #{testOrganization},
            cpu_vendor            = #{cpuVendor},
            as_id                 = #{asId}
        where id = #{id}
    </update>

    <select id="generateCertificate" parameterType="java.lang.Integer"
            resultType="com.huawei.it.euler.model.entity.GenerateCertificate">
        select id,
               company_name,
               product_name,
               product_version,
               os_name,
               os_version,
               hashrate_platform,
               test_organization,
               validity_period
        from software_t
        where id = #{softwareId}
    </select>

    <select id="getSignedFileId" parameterType="java.lang.Integer" resultType="java.lang.String">
        select fileid
        from attachments_t
        where software_id = #{softwareId}
          and file_type = 'sign';
    </select>

    <select id="findOsName" resultType="java.lang.String">
        select distinct os_name
        from os_t;
    </select>

    <select id="findTestOrganization" resultType="java.lang.String">
        select distinct name
        from innovation_center_t;
    </select>

    <select id="getCertificationIds" resultMap="AttachmentsMap">
        select fileid, filename,software_id
        from attachments_t
        where  file_type = 'certificates'
        <if test="softwareIds != null and softwareIds.size() > 0">
            and attachments_t.software_id in
            <foreach collection="softwareIds" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <delete id="deleteSoftware">
        update software_t
        set delete_flag = 1
        where id = #{id}
    </delete>

    <select id="statistics" parameterType="com.huawei.it.euler.ddd.service.software.cqe.SoftwareStatisticsQuery" resultMap="SoftwareStatisticsMap">
        SELECT
         COUNT( 1 ) AS sum,
         (CASE
            WHEN ( product_type LIKE '行业软件/%' OR product_type LIKE '基础软件/%' ) AND product_type != '基础软件/操作系统' THEN
                'ISV'
            WHEN product_type LIKE '硬件/%' AND product_type != '硬件/服务器整机' THEN
                'IHV-board'
            WHEN product_type = '硬件/服务器整机' THEN
                'IHV-server'
            ELSE 'OSV' END
          ) AS productType,
        <if test="dateKey == 'application_time'">
            DATE_FORMAT( application_time, '%Y-%m' ) AS datePeriod,
        </if>
        <if test="dateKey == 'certification_time'">
            DATE_FORMAT( certification_time, '%Y-%m' ) AS datePeriod,
        </if>
        test_organization
        FROM
            software_t
        WHERE
            delete_flag = 0
          AND `status` = 9
        <if test="dateKey == 'certification_time' and beginDate != null">
            and DATE_FORMAT(certification_time,'%Y-%m-%d') &gt;= DATE_FORMAT(#{beginDate},'%Y-%m-%d')
        </if>
        <if test="dateKey == 'certification_time' and endDate != null">
            and DATE_FORMAT(certification_time,'%Y-%m-%d') &lt;= DATE_FORMAT(#{endDate},'%Y-%m-%d')
        </if>
        <if test="dateKey == 'application_time' and beginDate != null">
            and DATE_FORMAT(application_time,'%Y-%m-%d') &gt;= DATE_FORMAT(#{beginDate},'%Y-%m-%d')
        </if>
        <if test="dateKey == 'application_time' and endDate != null">
            and DATE_FORMAT(application_time,'%Y-%m-%d') &lt;= DATE_FORMAT(#{endDate},'%Y-%m-%d')
        </if>
        <if test="testOrgIdList != null and testOrgIdList.size() > 0">
            and test_org_id in
            <foreach collection="testOrgIdList" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        GROUP BY
            productType,
            datePeriod,
            test_organization
        ORDER BY
            test_organization,
            datePeriod,
            FIELD( productType, 'ISV', 'IHV-server', 'IHV-board', 'OSV' );
    </select>

</mapper>